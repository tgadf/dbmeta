""" Base Class For MetaData Media Creation """__all__ = ["MetaMediaProducer"]from dbmaster import MasterMetasfrom utils import getFlatListfrom pandas import DataFrame, concat, Seriesimport warningsclass MetaMediaProducer:    def __repr__(self):        return f"MetaMediaProducer(metatype={self.metatype}, maxmedia={self.maxMedia})"            def __init__(self, mediaRanking, **kwargs):        self.verbose = kwargs.get('verbose', False)        assert isinstance(mediaRanking, dict), f"MediaRanking [{type(mediaRanking)}] is not a dict object"        self.maxMedia = kwargs.get('maxMedia', None)        self.mediaRanking = mediaRanking        self.metatype = "Media"        self.column = "Media"        ###########################################################################    # Media Data    ###########################################################################    def getMetaData(self, modValData: DataFrame) -> 'DataFrame':        assert isinstance(modValData, DataFrame), f"ModValData [{type(modValData)}] is not a DataFrame object"        if self.column not in modValData.columns:            warnings.warn("Warning: There is no media column")            mediaRankData = [Series(None, index=modValData.index, name=column) for column in MasterMetas().getMediaTypes().values()]            mediaRankData = concat(mediaRankData, axis=1)            return mediaRankData                    def testMediaNameTypes(mediaData):            mediaSampleData = mediaData[mediaData.notna()]            mediaSampleData = concat(mediaSampleData.sample(n=min([50, mediaSampleData.shape[0]]), replace=True).values)            if not all([isinstance(mediaSampleData, DataFrame), "Type" in mediaSampleData.columns]):                warnings.warn("Warning: There is no media to test media name types...")                return                        mediaTypeNames = set(mediaSampleData["Type"].unique())            mediaRankTypeNameValues = set(getFlatList(self.mediaRanking.values()))            unknownMediaTypeNames = mediaTypeNames.difference(mediaRankTypeNameValues)            if len(unknownMediaTypeNames) > 0:                raise ValueError(f"Could not find [{unknownMediaTypeNames}] mediaTypeNames in mediaRankings (from metadataio)\nMediaTypeNames = {mediaTypeNames}\nMediaRankTypeNameValues = {mediaRankTypeNameValues}")            unknownMediaRankTypeNames = mediaRankTypeNameValues.difference(mediaTypeNames)            if len(unknownMediaRankTypeNames) > 0:                if self.verbose is True:                    # warnings.warn(f"Warning: Could not find {unknownMediaRankTypeNames} mediaRankTypeNames in mediaTypeNames (from data)")                    pass            def getMediaFromType(media, mediaRank, mediaRankTypes):            if not isinstance(media, DataFrame):                return None            retvalMediaData = media[media["Type"].isin(mediaRankTypes)] if ("Type" in media.columns) else None            retval = {}            if isinstance(retvalMediaData, DataFrame) and retvalMediaData.shape[0] > 0:                for mediaRank, mediaRankData in retvalMediaData.groupby("Type"):                    retval[mediaRank] = retvalMediaData.head(self.maxMedia)["name"].to_list() if isinstance(self.maxMedia, int) else mediaRankData["name"].to_list()            else:                retval = None            return retval                mediaData = modValData[self.column]        testMediaNameTypes(mediaData)        mediaRankData = mediaData.apply(lambda media: {mediaRank: getMediaFromType(media, mediaRank, mediaRankTypes) for mediaRank, mediaRankTypes in self.mediaRanking.items()})        mediaRankData = DataFrame(mediaRankData.to_dict()).T        mediaRankData = mediaRankData.rename(columns=MasterMetas().getMediaTypes())        return mediaRankData    