""" Media Summary File IO """__all__ = ["MediaSummaryFileIO", "MediaSummaryDataIO"]from dbbase import MusicDBRootDataIO, getModValsfrom utils import Timestat, flattenListsfrom pandas import DataFrame, concat, merge, uniqueclass MediaSummaryDataIO:    def __repr__(self):        return f"MediaSummaryDataIO(db={self.rdio.db})"        def __init__(self, name: str, columns: list, rdio: MusicDBRootDataIO, **kwargs):        self.verbose = kwargs.get('verbose', False)        test = kwargs.get('test', False)        assert isinstance(name, str), f"name [{name}] is not a string key"        assert isinstance(columns, list), f"columns [{columns}] is not a list"        self.rdio = rdio                def getMediaColumns(data, columns):            mediaColumns = columns            mediaColumns = ["artids"] + mediaColumns if "artids" in data.columns else mediaColumns            mediaColumns = ["dbid"] + mediaColumns if "dbid" in data.columns else mediaColumns            return mediaColumns                modVals = [0] if test is True else getModVals()        ts = Timestat(f"Getting {name}[columns] Data", verbose=self.verbose, ind=2)        mediaData = []        for n, modVal in enumerate(modVals):            data = self.rdio.getData(name, modVal)            assert isinstance(data, DataFrame), f"name {name} data is not a DataFrame!"            assert all([col in data.columns for col in columns]), f"Not all columns [{columns}] exist!"            mediaColumns = getMediaColumns(data, columns)            mediaData.append(data[mediaColumns])                    self.data = concat(mediaData)        hasArtistID = "artids" in self.data.columns        self.data = self.data.explode("artids") if hasArtistID is True else self.data        ts.comment(cmt=f"Set Data [{name}] ... {self.data.shape} (ArtistID={hasArtistID})")        ts.stop()    def get(self) -> 'DataFrame':        return self.data                    class MediaSummaryFileIO:    def __repr__(self):        return f"MediaSummaryFileIO(db={self.rdio.db})"    def __init__(self, rdio: MusicDBRootDataIO, mediaSummary: dict, **kwargs):        self.verbose = kwargs.get('verbose', False)        self.rdio = rdio        self.mediaData = {}        self.mediaSummary = mediaSummary        #######################################################################        # Media & ArtistMedia Pairings        #######################################################################        colPairings = {}        mediaTypes = ["Artist", "Media"]        for mediaType in mediaTypes:            for mediaName, mediaCols in mediaSummary.get(mediaType, {}).items():                if not isinstance(mediaCols, list):                    continue                for col in mediaCols:                    if colPairings.get(col) is None:                        colPairings[col] = []                    colPairings[col].append((mediaType, mediaName))        self.colPairings = colPairings                        self.colLocations = {}        self.mediaConcats = {}        mediaConcats = {}        for col, colPairs in colPairings.items():            if len(colPairs) == 1:                self.colLocations[col] = colPairs[0][1]            else:                typeArtist = [mediaName for (mediaType, mediaName) in colPairs if mediaType == "Artist"]                typeMedia = [mediaName for (mediaType, mediaName) in colPairs if mediaType == "Media"]                if len(typeArtist) > 1 and len(typeMedia) <= 1:                    mediaConcats[col] = ("Artist", typeArtist)                elif len(typeArtist) <= 1 and len(typeMedia) > 1:                    mediaConcats[col] = ("Media", typeMedia)        for col, (mediaType, mediaList) in mediaConcats.items():            if len(mediaList) <= 1:                continue            name = "-".join(mediaList)            if self.mediaConcats.get(name) is None:                self.mediaConcats[name] = []            self.mediaConcats[name].append(col)            for mediaName in mediaList:                self.colPairings[col].remove((mediaType, mediaName))            self.colPairings[col].append((mediaType, name))        if self.verbose is True and False:            for col, colPairs in self.colPairings.items():                print(f"  ==> {col}: {colPairs}")                #######################################################################        # (Artist) Media Data Info        #######################################################################        self.mediaNames = {}        mediaNames = mediaSummary.get("Media")        assert isinstance(mediaNames, dict), f"mediaNames [{mediaNames}] is not a dict"        for mediaName, mediaColumns in mediaNames.items():            assert isinstance(mediaColumns, list), f"media columns [{mediaColumns}] is not a list"            self.mediaNames[mediaName] = mediaColumns                    self.artistMediaNames = {}        artistMediaNames = mediaSummary.get("Artist")        assert isinstance(artistMediaNames, dict), f"artistMediaNames [{artistMediaNames}] is not a dict"        for artistMediaName, artistMediaColumns in artistMediaNames.items():            assert isinstance(artistMediaColumns, list), f"artistMedia columns [{artistMediaColumns}] is not a list"            self.artistMediaNames[artistMediaName] = artistMediaColumns    ###########################################################################    # Load Media Data    ###########################################################################    def setMediaData(self, **kwargs) -> 'None':        for mediaName, mediaColumns in self.mediaNames.items():            if self.mediaData.get(mediaName) is not None:                continue            msdio = MediaSummaryDataIO(f"ModVal{mediaName}", mediaColumns, self.rdio, **kwargs)            self.mediaData[mediaName] = msdio.get()            ###########################################################################    # Load Media Data    ###########################################################################    def setArtistMediaData(self, **kwargs) -> 'None':        for artistMediaName, artistMediaColumns in self.artistMediaNames.items():            if self.mediaData.get(artistMediaName) is not None:                continue            msdio = MediaSummaryDataIO(f"ModVal{artistMediaName}", artistMediaColumns, self.rdio, **kwargs)            self.mediaData[artistMediaName] = msdio.get()    ###########################################################################    # Concat All Media    ###########################################################################    def concatMediaData(self, name: str, cols: list, **kwargs) -> 'None':        verbose = kwargs.get('verbose', self.verbose)        if self.mediaData.get(name) is not None:            return        mediaNames = name.split('-')        ts = Timestat(f"Concating {mediaNames} Data", verbose=verbose, ind=2)        assert all([mediaName in self.mediaData.keys() for mediaName in mediaNames]), f"Unknown mediaNames: {mediaNames}"                concatData = concat([self.mediaData[mediaName] for mediaName in mediaNames])                mediaColumns = ["artids", "dbid"] + cols        self.mediaData[name] = concatData[concatData['artids'].notna()][mediaColumns]        for col in cols:            self.colLocations[col] = name                ts.comment(cmt=f"Set Concat Data ... {self.mediaData[name].shape}")        ts.stop()                    ###########################################################################    # Join All Media    ###########################################################################    def joinMediaData(self, artistMediaName: str, mediaName: str, **kwargs) -> 'None':        verbose = kwargs.get('verbose', self.verbose)        def getExplodedData(mediaName: str) -> 'DataFrame':            mediaData = self.mediaData.get(mediaName)            cmt = f"mediaData [{mediaName}] is not DataFrame [{type(mediaData)}]. Available: {self.mediaData.keys()}"            assert isinstance(mediaData, DataFrame), cmt            return mediaData                name = f"{artistMediaName}-{mediaName}"        if self.mediaData.get(name) is not None:            return                    ts = Timestat(f"Joining [{artistMediaName}] <-> [{mediaName}] Data", verbose=verbose, ind=2)        artistMediaData = getExplodedData(artistMediaName)        mediaData = getExplodedData(mediaName)        mergeData = merge(artistMediaData, mediaData, how='outer', on='dbid')                col = "artids"        mergeData[col] = mergeData[[f"{col}_x", f"{col}_y"]].apply(unique, axis=1)        dupls = [col[:-2] for col in mergeData.columns if (col.endswith("_x") and not col.startswith("artids"))]        for col in dupls:            mergeData[col] = mergeData[f"{col}_x"]            mergeData.loc[mergeData[col].isna(), col] = mergeData.loc[mergeData[col].isna(), f"{col}_y"]            self.colLocations[col] = name        dropCols = flattenLists([[f"{col}_x", f"{col}_y"] for col in ["artids"] + dupls])        mergeData = mergeData.drop(dropCols, axis=1)        mergeData = mergeData.explode('artids')        self.mediaData[name] = mergeData[mergeData["artids"].notna()]        ts.comment(cmt=f"Set Joined Data ... {self.mediaData[name].shape}")        ts.stop()