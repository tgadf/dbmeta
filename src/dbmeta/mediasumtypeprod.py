""" Base Class For Media Summary Data Type Creation """__all__ = ["MediaSummaryTypeProducer"]from utils import Timestatfrom pandas import DataFramefrom functools import partialfrom .mediasumfileio import MediaSummaryFileIOfrom .mediasumjoiner import MediaSummaryJoinerclass MediaSummaryTypeProducer:    def __repr__(self):        return f"MediaSummaryTypeProducer(summaryType={self.summaryType}, mappers={list(self.mapper.keys())})"            def __init__(self, summarytype: str, mapper: dict, msfio: MediaSummaryFileIO, **kwargs):        self.verbose = kwargs.get('verbose', False)        self.test = kwargs.get('test', False)        assert isinstance(summarytype, str), f"summarytype [{summarytype}] is not a str"        self.summaryType = summarytype        assert isinstance(mapper, dict), "mapper [{mapper}] is not a dict"        for k, v in mapper.items():            assert callable(v), f"mapper [{k}] is not callable"        self.mapper = mapper        self.summaryType = summarytype        assert isinstance(msfio, MediaSummaryFileIO), f"grouper [{type(msfio)}] is not a MediaSummaryFileIO"        self.msfio = msfio            ###########################################################################    # Artist ID => Media Dates Map    ###########################################################################    def getMediaSummaryData(self, **kwargs) -> 'DataFrame':        ts = Timestat(f"Making Media {self.summaryType} Summary Data", verbose=self.verbose, ind=2)        summaryData = []        for col, colMapper in self.mapper.items():            colLocation = self.msfio.colLocations.get(col)            assert colLocation in self.msfio.mediaData.keys(), f"col [{col}] location [{colLocation}] not in mediaData"            cmt = f"  Column [{col}] Using [{colLocation}] Media"            ts.comment(cmt=cmt)            mediaData = self.msfio.mediaData[colLocation]            assert "artids" in mediaData.columns, f"ArtistID column [artids] not in columns: {mediaData.columns}"            medSumData = mediaData[mediaData[col].notna()][["artids", col]]            numData = mediaData.shape[0]            numArtists = mediaData["artids"].nunique()                    cmt = f"  Grouping [{numData}] Data For {numArtists} Unique Artists (will take a minute) ... "            ts.comment(cmt=cmt)            mapper = partial(colMapper, column=col)            mediaSummaryData = medSumData.groupby("artids").apply(mapper)            mediaSummaryData.index.name = None            if isinstance(mediaSummaryData, DataFrame):                mediaSummaryData.columns.name = None            else:                mediaSummaryData.name = col            summaryData.append(mediaSummaryData)        # Joining & Saving        joiner = MediaSummaryJoiner(self.msfio.rdio, verbose=self.verbose, test=self.test)        retval = joiner.joinSummaryData(self.summaryType, mediaSummaryData, ts, saveit=True)        ts.stop()        return retval